/*
find all possible combinations 
backtracking template:
    1. check base case
    2. for all possible options
    3. check if that option is valid
    4. if valid, choose that option
    5. do backtracking
    6. undo that option

use string builder to build a string


*/
class Solution {
    String[] map = new String[] {
            "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"
    };
    
    private List<String> res = new ArrayList<>();
    private StringBuilder path = new StringBuilder();
    private String digits;
    public List<String> letterCombinations(String digits) {
        if (digits == null || digits.length() == 0) return res;
        this.digits = digits;
        // after vising index 0, the string builder is null
        backtrack(0);
        return res;

    }
    
    // definition of backtrack: after visiting index i
    private void backtrack(int index) {
        // check base case
        if (index == digits.length()) {
            res.add(path.toString());
            return;
        }
        
        char ch = digits.charAt(index);
        String str = map[ch - '1']; // get all possible options
        
        // for each possible options, they are automatically valid
        for (int i = 0; i < str.length(); i++) {
            // choose that option
            path.append(str.charAt(i));
            
            // backtrack
            backtrack(index + 1);
            
            // undo that option
            path.deleteCharAt(path.length() - 1);
        }

    }
}