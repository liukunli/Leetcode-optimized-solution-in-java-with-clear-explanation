/*

Use the same template

	public int findFirst(int[] nums, int target) {
        int len = nums.length;
        int left = 0, right = len - 1;
        while(left <= right) {
            int mid = left + (right - left) / 2;
            if(nums[mid] > target) {
                right = mid - 1;
            } else if(nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        if(left >=len || nums[left] != target) return -1;
        return left;
	}
    
    
    public int findLast(int[] nums, int target) {
        int len = nums.length;
        int left = 0, right = len - 1;
        while(left <= right) {
            int mid = left + (right - left) / 2;
            if(nums[mid] > target) {
                right = mid - 1;
            } else if(nums[mid] < target) {
                left = mid + 1;
            } else {
                left = mid + 1;
            }
        }
        if(right <0|| nums[right] != target) return -1;
        return right;
    }


*/


public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
    int left = 1, right = n;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (!isBadVersion(mid)) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }

    return left;   
    }
}