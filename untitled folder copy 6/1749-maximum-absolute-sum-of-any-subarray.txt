/*
the max absolute sum is either be the largest sum, or the smallest sum
implement a findMax and findMin function

*/
class Solution {
    public int maxAbsoluteSum(int[] nums) {
        if(nums == null || nums.length == 0) {
            return 0;
        }
        
        int max = findMax(nums);
        int min = findMin(nums);
        
        return Math.max(max, Math.abs(min));
        
    }
    
    public int findMax(int[] nums) {
        int len = nums.length;
        if(len == 1) {
            return nums[0];
        }
        // definition of dp array: the max subarray ending that index i
        // it may only contain i, or i and the one before it
        int[] res = new int[len];
        res[0] = nums[0];
        int max = nums[0];
        
        for(int i = 1; i < len; i++) {
            res[i] = Math.max(res[i-1] + nums[i], nums[i]);
            max = Math.max(max, res[i]);
        }
        return max;
    }
    
    public int findMin(int[] nums) {
        int len = nums.length;
        if(len == 1) {
            return nums[0];
        }
        // definition of dp array: the min subarray ending that index i
        // it may only contain i, or i and the one before it
        int[] res = new int[len];
        res[0] = nums[0];
        int min = nums[0];
        
        for(int i = 1; i < len; i++) {
            res[i] = Math.min(res[i-1] + nums[i], nums[i]);
            min = Math.min(min, res[i]);
        }
        return min;
    }
    
}






/*
the max absolute sum is either be the largest sum, or the smallest sum
implement a findMax and findMin function

this code may not be the most efficent. But it is error proof

to make it more efficient, you can combine findMax and findMin together.
Also, space can be optimized to O(1)

*/
class Solution {
    public int maxAbsoluteSum(int[] nums) {
        if(nums == null || nums.length == 0) {
            return 0;
        }
        int len = nums.length;
        int pre_max = nums[0];
        int pre_min = nums[0];
        int max = nums[0];
        int min = nums[0];
        
        for(int i = 1; i < len; i++) {
            // maxsubarray ending that index i
            // 2 options, it will either be itself, or be itself plus the one before it
            pre_max = Math.max(nums[i], nums[i] + pre_max);
            // min subarray ending at index i
            // 2 options: either be itself, or be itself plus the one before it
            pre_min = Math.min(nums[i], nums[i] + pre_min);
            max = Math.max(max, pre_max);
            min = Math.min(min, pre_min);
        }
        
        return Math.max(max, Math.abs(min));
        
    }
    
}