/*
just add up all the positive shifts

*/

public class Solution {
    public int maxProfit(int prices[]) {
        int minprice = Integer.MAX_VALUE;
        int maxprofit = 0;
        for (int i = 0; i < prices.length; i++) {
            if (prices[i] < minprice)
                minprice = prices[i];
            else if (prices[i] - minprice > maxprofit)
                maxprofit = prices[i] - minprice;
        }
        return maxprofit;
    }
}


class Solution {
    public int maxProfit(int[] prices) {
        // check edge cases        
        if(prices == null || prices.length == 0 || prices.length == 1) {
            return 0;
        }
        // calculate prices changes between each day
        int len = prices.length;
        int[] diff = new int[len - 1];
        for(int i = 0; i < len - 1; i++) {
            diff[i] = prices[i+1] - prices[i];
        }
        // dp initialization
        int[] dp = new int[len - 1];
        dp[0] = diff[0];
        int max = Math.max(0, dp[0]);
        // dp implementation
        for(int i = 1; i < len - 1; i++) {
            dp[i] = Math.max(diff[i], dp[i-1] + diff[i]);
            max = Math.max(max, dp[i]);
        }
        return max;
    }
}



class Solution {
    public int maxProfit(int[] prices) {
        
        // check edge case        
        if(prices == null || prices.length == 0) {
            return 0;
        }
        
        // initialize buy and sell point
        int buy = 0;
        int sell = 0;
        int max_profit = 0;
        int current_profit = 0;
        
        // two pointer implementation
        for(int i = 1; i < prices.length; i++) {
            // when the current price is bigger than the previous sell price, update the sell point
            if(prices[i] > prices[sell]) {
                sell = i;
                current_profit = prices[sell] - prices[buy];
                max_profit = Math.max(max_profit, current_profit);
            } else if(prices[i] < prices[buy]) { // when the current price is smaller than the previous buy in price, update the buy and sell point
                buy = i;
                sell = i;
            }
        }
        return max_profit;
    }
}
