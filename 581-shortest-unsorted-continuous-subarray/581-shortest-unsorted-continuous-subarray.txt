/*
From the beginning and end of the array, find the first elements that are out of the sorting order. The two elements will be our candidate subarray.
Find the maximum and minimum of this subarray.
Extend the subarray from beginning to include any number which is bigger than the minimum of the subarray.
Similarly, extend the subarray from the end to include any number which is smaller than the maximum of the subarray.

*/
class Solution {
    public int findUnsortedSubarray(int[] nums) {
        // find the left boundary and right boundary
        // find the max and min within that boundary
        
        if(nums == null || nums.length == 0) {
            return 0;
        }
        
        int len = nums.length;
        int left = 0, right = len - 1;
        while(left + 1 < len && nums[left] <= nums[left+1]) {
            left++;
        }
        
        if(left == len - 1) return 0;
        
        while(right > 0 && nums[right-1] <= nums[right]) {
            right--;
        }
        
        int max = nums[left], min = nums[left];
        for(int i = left; i <= right; i++) {
            if(max < nums[i]) max = nums[i];
            if(min > nums[i]) min = nums[i];
        }
        
        left = 0;
        while(nums[left] < min) {
            left++;
        }
        right = len - 1;
        while(nums[right] > max) {
            right--;
        }
        return right - left + 1;
    }
}




class Solution {
    public int findUnsortedSubarray(int[] nums) {
        if (nums.length == 0) {
            return 0;
        }
        int max = nums[0];
        int right  = 0;
        //从左向右遍历
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] < max) {
                right = i;
            }
            max = Math.max(max, nums[i]);
        }

        //从右向左遍历
        int min   = nums[nums.length-1];
        int left  = 0;
        for (int i = nums.length - 2; i >= 0; i--) {
            if (nums[i] > min) {
                left = i;
            }
            min = Math.min(min, nums[i]);
        }

        return left == right ? 0 : Math.abs(right - left) + 1;
    }
}