class Solution {
    
    private int global_count = 0;
    
    Set<Integer> colSet = new HashSet();
    
    Set<Integer> pieSet = new HashSet();
    
    Set<Integer> naSet = new HashSet();
    
    public int totalNQueens(int n) {
        if(n<1) {
            return 0;
        }
        backtrack(n, 0);
        return global_count;
        
    }
    
    public void backtrack(int n, int row) {
        if(row >= n) {
            global_count++;
            return ;
        }
        
        for(int i = 0; i < n; i++) {   // 对于每一个选项
            // 检查该选项是否合理
            if (colSet.contains(i) || pieSet.contains(row + i) || naSet.contains(row - i)) {
                continue;
            }
            
            // 做选择
            colSet.add(i);
            pieSet.add(row + i);
            naSet.add(row - i);
            
            // backtrack
            backtrack(n, row + 1);
            
            // 撤销选择
            colSet.remove(i);
            pieSet.remove(row + i);
            naSet.remove(row - i);
        }
        
        
    }
    
    
    
    
}