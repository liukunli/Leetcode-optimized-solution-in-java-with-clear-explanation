/*
for this question, construct a graph
then do DFS to see if there is any cycle

	dfs(Node current) {
		
		if(visiting) {
			// this means that there is no topological sort
		}
		
		if(visited) {
			break;
		}
		// set status to visiting

		for(Node child : current.children) {
			dfs(child);
		}

		// set status to visited
		result.add(current); 
	}
	
in main function:
for all nodes: dfs(node)
Collections.reverse(result)



*/
class Solution {
    
    private List<Integer>[] graph;
    private int[] status;
    
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        
        // construct a graph with adjacency list representation
        List<Integer>[] graph = new List[numCourses];
        for(int i = 0; i < numCourses; i++) {
            graph[i] = new ArrayList<Integer>();
        }
        for(int[] pre : prerequisites) {
            graph[pre[1]].add(pre[0]);
        }
        this.graph = graph;
        
        // status 0, meaning not visited, 1 meaning visiting, 2 meaning visisted
        status = new int[numCourses];
        
        // dfs implementation
        for(int i = 0; i < numCourses; i++) {
            if(dfs(i)) {
                return false;
            }
        }
        return true;
    }
    
    // dfs traversal
    // return true if there is a cycle
    // return false if there is no cycle
    public boolean dfs(int current) {
        // check base base
        // if it is being visiting, and then being visiting again. then there is a cycle
        if(status[current] == 2) {
            return false;
        }
        if(status[current] == 1) {
            return true;
        }
        
        status[current] = 1;
        for(int next : graph[current]) {
            if(dfs(next)) {
                return true;
            }
        }
        status[current] = 2;
        return false;
    }
}