/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/*
next greater template using stack

Stack<Integer> stack = new Stack<>();
for(int i = 0; i < len; i++) {
    while(!stack.isEmpty() && stack.peek() < nums[i]) {
        int current = stack.pop();
    }
    stack.add(nums[i]);
}



*/

class Solution {
    
     private class Elem {
            int value;
            int index;
            Elem(int value, int index) {
                this.value = value;
                this.index = index;
            }
    }
    
    public int[] nextLargerNodes(ListNode head) {
        
        
        
        
        // for linkedlist, you cannot look back
        // convert linkedlist into an arraylist
        ArrayList<Integer> T = new ArrayList<>();
        if(head == null) {
            return null;            
        }
        while(head != null) {
            T.add(head.val);
            head = head.next;
        }
        
        // index 0 is value, index 1 is index in the original array
        Stack<Elem> stack = new Stack<>();

		// for the result
		int[] result = new int[T.size()];
        for(int i = 0; i < T.size(); i++) {
            while(!stack.isEmpty() && stack.peek().value < T.get(i)) {
                Elem current = stack.pop();
                result[current.index] = T.get(i);
            }
            stack.add(new Elem(T.get(i), i));
        }
        return result;
    }
}