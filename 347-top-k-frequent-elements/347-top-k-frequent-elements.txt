class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        // use hashmap for counting. the key is the number, the value is the frequency of the number
        // num -> freq
        Map<Integer, Integer> map = new HashMap<>();
        for(int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        int len = nums.length;
        // the index is the frequency, the list associated with it is the numbers with that frequency
        // freq -> num
        List<Integer>[] buckets = new ArrayList[nums.length + 1];;
        for(int num : map.keySet()) {
            int freq = map.get(num);
            if(buckets[freq] == null) {
                buckets[freq] = new ArrayList<>();
            }
            buckets[freq].add(num);
        }
        
        // use the index so that the freq is automatically sorted
        List<Integer> topK = new ArrayList<>();
        for (int i = buckets.length - 1; i >= 0 && topK.size() < k; i--) {
            if (buckets[i] == null) {
                continue;
            }
            if (buckets[i].size() <= (k - topK.size())) {
                topK.addAll(buckets[i]);
            } else {
                topK.addAll(buckets[i].subList(0, k - topK.size()));
            }
        }
        
        // convert arraylist to array and return
        int[] res = new int[k];
        for (int i = 0; i < k; i++) {
            res[i] = topK.get(i);
        }
        return res;
    }
}