/*
similar to longest increaing subsequence
keep a seperate count for each length of subsequence

*/
class Solution {
    public int findNumberOfLIS(int[] nums) {
        if(nums == null || nums.length == 0) {
            return 0;
        }
        
        // check input
        int len = nums.length;
        if(len == 0) {
            return -1;
        }
        
        // initialization
        int[] length = new int[nums.length];
        int[] count = new int[nums.length];
        
        // DP implementation with two loops
        for(int k = 0; k < nums.length; k++) {
            length[k] = 1;
            count[k] = 1;
            for (int i = k-1; i >= 0; i--) {
                if(nums[i] < nums[k]) {
                    if(length[i] + 1 > length[k]) {
                        length[k] = length[i] + 1;
                        count[k] = count[i]; // this step of update is critical
                    } else if(length[i] + 1 == length[k]) {
                        count[k] += count[i]; // this step of update is critical
                    }
                }
            }
        }
        
        // find result and return
        int best = 1;
        for(int i = 0; i < nums.length; i++) {
            best = Math.max(best, length[i]);
        }
        
        int best_count = 0;
        for(int i = 0; i < nums.length; i++) {
            if(length[i] == best) {
                best_count += count[i];
            }
        }
        
        return best_count;
    }
}