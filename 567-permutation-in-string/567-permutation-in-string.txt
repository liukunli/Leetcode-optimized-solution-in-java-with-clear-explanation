/*
sliding window maximum implementation

int left, right
for(right = 0; right < len; right++) {
    # add element from the right into the window
    
    while(window invalid) {
        # remove element from the left from the window
        # increment left pointer
        left++;
    }
    # use Math.max to update max
}


*/



class Solution {
    public boolean checkInclusion(String s1, String s2) {
        
        Map<Character, Integer> window = new HashMap<Character, Integer>();
        for(char c : s1.toCharArray()) {
            window.put(c, window.getOrDefault(c, 0) + 1);
        }
        
        int left = 0, right;
        int len = s2.length();
        
        for(right = 0; right < len; right++) {
            
            // put the element on the right into the window
            char rightChar = s2.charAt(right);
            window.put(rightChar, window.getOrDefault(rightChar, 0) - 1);
            if(window.get(rightChar) == 0) window.remove(rightChar);
            
            // shrink the window if it is too big
            while(right - left + 1  > s1.length()) {
                // remove the left element
                char leftChar = s2.charAt(left);
                window.put(leftChar, window.getOrDefault(leftChar, 0) + 1);
                if(window.get(leftChar) == 0) window.remove(leftChar);
                
                // increment the pointer
                left++;
            }
            
            if(window.keySet().size() == 0) return true; 
        }
        return false;        
    }
}