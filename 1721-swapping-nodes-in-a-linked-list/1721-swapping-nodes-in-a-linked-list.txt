/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

/*
use slow and fast pointers
move the fast k times first to get the element on the left
move the fast and slow pointers at the same time until fast pointer reaches the end
in this way, you can get the element on the right

*/
class Solution {
    public ListNode swapNodes(ListNode head, int k) {
        
        if(head == null && head.next == null) {
            return head;
        }
        
        // contains the left node and the right node to be swapped
        ListNode left;
        ListNode right;
        
        // use a dummy node to point to the head
        ListNode dummy = new ListNode(-1);
        dummy.next = head;
        
        // use slow and fast pointers
        ListNode slow = dummy;
        ListNode fast = dummy;
        
        int i = 1;
        while(i < k) {
            fast = fast.next;
            i++;
        }
        left = fast.next;
        
        while(fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next;
        }
        right = slow.next;
        
        // swap values
        int temp = left.val;
        left.val = right.val;
        right.val = temp;
        
        return dummy.next;
        
        
        
    }
}