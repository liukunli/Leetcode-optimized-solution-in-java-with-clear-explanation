/*

a slight variant of permutation problem
In this problem, we need all possible unique permutations
when doing DFS, on the same layer, there should only be unique number
use a hashset to check on this


*/
class Solution {
    
    private List<List<Integer>> res = new ArrayList<>();
    private List<Integer> current_list = new ArrayList<>();
    private boolean[] used;
    private int[] nums;
    private int len;
    
    public List<List<Integer>> permuteUnique(int[] nums) {
        this.nums = nums;
        this.len = nums.length;
        //Arrays.sort(this.nums);
        this.used = new boolean[this.len];
        dfs();
        return res;
    }
    
    private void dfs() {
        // check base case
        if(current_list.size() == len) {
            res.add(new ArrayList(current_list));
            return ;
        }
        
        // for each possible option
        HashSet<Integer> set = new HashSet<>();
        // there cannot be two same number on the same layer
        
        for(int i = 0; i < len; i++) {
            // check if that option is valid
            if(used[i]) {
                continue;
            }
            
            // remove duplicates, check if that option is valid
            if(set.contains(nums[i])) {
                continue;
            }
            
            // choose that option
            current_list.add(nums[i]);
            used[i] = true;
            // dfs
            dfs();
            // undo choosing that option
            current_list.remove(current_list.size() - 1);
            used[i] = false;
            
            set.add(nums[i]);
            
        }
    
    }
}


