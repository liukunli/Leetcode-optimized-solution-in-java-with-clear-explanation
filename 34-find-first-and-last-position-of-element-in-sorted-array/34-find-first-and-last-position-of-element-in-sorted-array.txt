/*

binary search with small modification
memorize findLast() and findFirst() method. Those are used to find the left and right bound
This code may not be the most efficient code since it do binary search twice.
But it is very intuitive



*/
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] res = new int[2];
        res[0] = findFirst(nums, target);
        res[1] = findLast(nums, target);
        return res;
        
	}

	public int findFirst(int[] nums, int target) {
        int len = nums.length;
        int left = 0, right = len - 1;
        while(left <= right) {
            int mid = left + (right - left) / 2;
            if(nums[mid] > target) {
                right = mid - 1;
            } else if(nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        if(left >=len || nums[left] != target) return -1;
        return left;
	}
    
    
    public int findLast(int[] nums, int target) {
        int len = nums.length;
        int left = 0, right = len - 1;
        while(left <= right) {
            int mid = left + (right - left) / 2;
            if(nums[mid] > target) {
                right = mid - 1;
            } else if(nums[mid] < target) {
                left = mid + 1;
            } else {
                left = mid + 1;
            }
        }
        if(right <0|| nums[right] != target) return -1;
        return right;
    }
    
        
}