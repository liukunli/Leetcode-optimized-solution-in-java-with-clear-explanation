class Solution {
    // direction is adjacency horizontally or vertically
    private int[][] directions = new int[][]{{0, 1}, {0, -1}, {1, 0}, {-1,0}};
    private int row, col;
    private int[][] grid;
    
    public int maxAreaOfIsland(int[][] grid) {
        // check base case
        if(grid == null || grid.length == 0) {
            return 0;
        }
        // initialize global variable
        int row = grid.length, col = grid[0].length;
        this.row = row;
        this.col = col;
        this.grid = grid;
        
        int max_area = 0;
        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col; j++) {
                if(grid[i][j] == 1) {
                    int current_area = bfs(i, j);
                    max_area = Math.max(max_area, current_area);
                }
            }
        }
        
        return max_area;
    }
    
    /*
    BFS will return the area of that island
    */
    private int bfs(int i, int j) {
        
        int count = 0;
        
        // base case
        if(grid[i][j] == 0){
            return count;
        }
        
        // set the index as visited
        Queue<int[]> queue = new LinkedList<>();
        
        // set a index as visited when it is added into the queue
        grid[i][j] = 0;
        queue.add(new int[]{i,j});
        count++;
        
        while(!queue.isEmpty()) {
            int[] current = queue.poll();
            for(int[] direction : directions) {
                int newRow = current[0] + direction[0];
                int newCol = current[1] + direction[1];
                // check if the children is valid
                if(newRow<0||newRow>=row||newCol<0||newCol>=col || grid[newRow][newCol] == 0) {
                    continue;
                }
                grid[newRow][newCol] = 0;
                queue.add(new int[]{newRow, newCol});
                count++;
            }
        }
        return count;
    }
}



/*

Use a global variable whiling doing DFS. In this way, you don't need to propagate current_area information on every recursive call

*/
class Solution {
    // direction is adjacency horizontally or vertically
    private int[][] directions = new int[][]{{0, 1}, {0, -1}, {1, 0}, {-1,0}};
    private int row, col;
    private int[][] grid;
    int current_area = 0;
    
    public int maxAreaOfIsland(int[][] grid) {
        // check base case
        if(grid == null || grid.length == 0) {
            return 0;
        }
        // initialize global variable
        int row = grid.length, col = grid[0].length;
        this.row = row;
        this.col = col;
        this.grid = grid;
        int max_area = 0;
        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col; j++) {
                if(grid[i][j] == 1) {
                    current_area = 0;
                    dfs(i, j);
                    max_area = Math.max(max_area, current_area);
                }
            }
        }
        
        return max_area;
    }
    
    private void dfs(int i, int j) {
        // base case
        if(grid[i][j] == 0){
            return;
        }
        
        current_area++;
        
        // set the index as visited
        grid[i][j] = 0;
        
        // do dfs on its neighboring elements
        for(int[] direction : directions) {
            int newRow = i + direction[0];
            int newCol = j + direction[1];
            if(newRow<0||newRow>=row||newCol<0||newCol>=col) {
                continue;
            }
            dfs(newRow, newCol);
        }
    }
}