
class Solution {
    
    private int[] countMap = new int[128];
    
    public String minWindow(String s, String t) {
        
        if(s.length() < t.length()) {
            return "";
        }
        
        // count all elements in t and store them in count map
        for(int i = 0; i < t.length(); i++) {
            countMap[t.charAt(i)]++;
        }  
        
        int len = s.length();
        int left = 0, right;
        int min_len = Integer.MAX_VALUE;
        int[] min_len_index = new int[2];
        boolean found = false;
        for(right = 0; right < len; right++) {
            // add right element into the window
            countMap[s.charAt(right)]--;
            
            while(isValidWindow()) {
                // at this time, the window is valid
                // move the left pointer until the window becomes invalid
                // update min
                found = true;
                int current_length = right - left + 1;
                if(min_len > current_length) {
                    min_len = current_length;
                    min_len_index[0] = left;
                    min_len_index[1] = right;
                }
                // remove the element at the left pointer
                // move the left pointer
                countMap[s.charAt(left)]++;  
                left++;
            }
        }
        if(!found) {
            return "";
        }
        
        
        return s.substring(min_len_index[0], min_len_index[1] +1);
    }
    
    public boolean isValidWindow() {
        for(int i = 0; i < 128; i++) {
            if(countMap[i] > 0) {
                return false;
            }
        }
        return true;
    }
}









/*
Sliding window minimum template:

left = 0, right;
for(right = 0; right < len; right++) {
	add the element pointed by right into the window
		
	while(window valid) {
		use Math.min to update target function
		remove the element pointed by left from the window
		left++; // increment left pointer
	}
}


*/
class Solution {
    public String minWindow(String s, String t) {
        
        
        // initialization of the window 
        Map<Character, Integer> window = new HashMap<Character, Integer>();
        for(char c : t.toCharArray()) {
            window.put(c, window.getOrDefault(c, 0) + 1);
        }
        
        // initialization of left and right pointer
        int target = window.keySet().size();
        int matched = 0;
        int min_len = Integer.MAX_VALUE;
        int[] index = new int[2];
        int left = 0, right;
        
        // sliding window minimum implementation
        for(right = 0; right < s.length(); right++) {
            // add element on the right into the window
            char right_char = s.charAt(right);
            if(window.containsKey(right_char)) {
                window.put(right_char, window.get(right_char) - 1);
                if(window.get(right_char) == 0) {
                    matched++;
                }
            }
            
            // shrink the window the while it is valid
            while(matched == target) {
                
                // update min
                if(min_len > right - left + 1) {
                    min_len = right - left + 1;
                    index[0] = left;
                    index[1] = right;
                }
                
                // remove left element from the window
                char left_char = s.charAt(left);
                if(window.containsKey(left_char)) {
                    window.put(left_char, window.get(left_char) + 1);
                    if(window.get(left_char) == 1) {
                        matched--;
                    }
                }
                left++;
            }
        }
        
        return min_len == Integer.MAX_VALUE ? "" : s.substring(index[0], index[1] + 1);        
    }
}