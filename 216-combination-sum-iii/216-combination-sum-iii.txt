/*
backtracking template:
    1. check base case
    2. for all possible options
    3. check if that option is valid (repeating, unique)
    4. if valid, choose that option
    5. do backtracking
    6. undo that option


*/



class Solution {
    
    private int target_len;
    private int target;
    private List<List<Integer>> res = new ArrayList<>();
    private List<Integer> current_list = new ArrayList<>();
    private int[] candidates = new int[]{1,2,3,4,5,6,7,8,9};
    
    
    public List<List<Integer>> combinationSum3(int k, int target) {
        this.target = target;
        this.target_len = k;
        
        // index is the next available index to explore
        // sum is the current sum, before exploring next availble index   
        dfs(0,0);
        
        return res;
    }
    
    // index is the next available index to explore
    // sum is the current sum, before exploring next availble index
    public void dfs(int index,int sum) {
        
        if(sum == target && current_list.size() == target_len) {
            res.add(new ArrayList(current_list));
            return ;
        }
        
        if(current_list.size() > target_len) {
            //current_list.clear();
            return ;
        }
        
        for(int i = index; i < 9; i++) {
            if(sum + candidates[i] <= target) {
                current_list.add(candidates[i]);
                dfs(i+1, sum + candidates[i]);  // no repeating element, the next element starts at i + 1
                // if repeating elements are allowed, the next element starts at i again
                current_list.remove(current_list.size()-1);
            } else {
                break;
            }
        }
    }
}