/*
sliding window maximum implementation

int left, right
for(right = 0; right < len; right++) {
    # add element from the right into the window
    
    while(window invalid) {
        # remove element from the left from the window
        # increment left pointer
        left++;
    }
    # use Math.max to update max
}


*/
class Solution {
    public int lengthOfLongestSubstring(String s) {
        // check edge case
        if(s == null || s.length() == 0) {
            return 0;
        }
        // initialization
        char[] char_array = s.toCharArray();
        int left = 0, right;
        int len = s.length();
        int max = 0;
        // use set to store the window
        HashSet<Character> set = new HashSet<>();
        
        // sliding window maximum implementation
        for(right = 0; right < len; right++) {
            char right_char = char_array[right];
            while(set.contains(right_char)) {
                set.remove(char_array[left]);
                left++;
            }
            set.add(right_char);
            max = Math.max(max, right - left + 1);
        }
        return max;
        
    }
}



class Solution {
    public int lengthOfLongestSubstring(String s) {
        // check edge case
        if(s == null || s.length() == 0) {
            return 0;
        }
        // initialization
        char[] char_array = s.toCharArray();
        int left = 0, right;
        int len = s.length();
        int max = 0;
        boolean[] window = new boolean[256];
        
        // sliding window maximum implementation
        // use a boolean array to store the window
        for(right = 0; right < len; right++) {
            char right_char = char_array[right];
            while(window[right_char]) {
                char left_char = char_array[left];
                window[left_char] = false;
                left++;
            }
            window[right_char] = true;
            max = Math.max(max, right - left + 1);
        }
        return max;
    }
}